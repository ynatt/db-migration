options {
  STATIC = false;
  IGNORE_CASE=true;
}

PARSER_BEGIN(CCSQLiteQueryParser)

package javacc.sqlitequeryparser;

import db.migration.model.*;
import db.migration.model.modification.*;
import db.migration.model.modification.create.*;
import java.util.ArrayList;
import java.util.List;



public class CCSQLiteQueryParser{

    public DBChange analiseQuery() throws ParseException, TokenMgrError{
        return analise();
    }
}

PARSER_END(CCSQLiteQueryParser)

SKIP:
{
    "\n" | "\r" | "\r\n" | "\\" | "\t" | " "
}

TOKEN [IGNORE_CASE]:
{
    <T_CREATE_TABLE : "CREATE TABLE">
   |<T_OPEN_BRACKET :("(")>
   |<T_CLOSE_BRACKET :(")")>
   |<T_COMMA :(",")>
   |<T_PRIMARY_KEY :"PRIMARY KEY">
   |<T_AUTOINCREMENT :"AUTOINCREMENT">
   |<T_NOT :"NOT">
   |<T_NULL :"NULL">
   |<T_IF :"IF">
   |<T_EXISTS :"EXISTS">
   |<T_UNIQUE :"UNIQUE">
   |<T_DEFAULT :"DEFAULT">
   |<T_APOSTR :("'"|"\""|"["|"]"|"`")>
   |<T_CONSTRAINT:"CONSTRAINT">
   |<T_ON:"ON">
   |<T_CONFLICT:"CONFLICT">
   |<T_ROLLBACK:"ROLLBACK">
   |<T_ABORT:"ABORT">
   |<T_FAIL:"FAIL">
   |<T_IGNORE:"IGNORE">
   |<T_REPLACE:"REPLACE">
   |<T_FOREIGN_KEY:"FOREIGN KEY">
   |<T_REFERENCES:"REFERENCES">
   |<T_DELETE:"DELETE">
   |<T_UPDATE:"UPDATE">
   |<T_SET:"SET">
   |<T_CASCADE:"CASCADE">
   |<T_RESTRICT:"RESTRICT">
   |<T_NO:"NO">
   |<T_ACTION:"ACTION">
   |<T_DEFERRABLE:"DEFERRABLE">
   |<T_INITIALLY:"INITIALLY">
   |<T_DEFERRED:"DEFERRED">
   |<T_IMMEDIATE:"IMMEDIATE">
}

TOKEN [IGNORE_CASE]:
{
	<T_IDENTIFIER: <LETTER>(<LETTER>|<NUMBER>)*>
   |<#LETTER:["$","A"-"Z","_","a"-"z"]>
   |<#NUMBER:["0"-"9"]>
   |<T_QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])+ "\"" | ("'" (~["\n","\r","'"])+ "'") | ( "[" ~["0"-"9","]"] (~["\n","\r","]"])* "]" ) | ("`" (~["\n","\r","'"])+ "`")>
}

DBChange analise():
{
	DBChange dbChange = null;
}
{
		(
			dbChange=createTable()
		)
		
		{
			return dbChange;
		}
}

String getObjectName():
{
	Token token = null;
}
{
	(
		token = <T_IDENTIFIER>
		| token = <T_QUOTED_IDENTIFIER>
	)
	{
		return token.image;
	}
}

CreateTable createTable():
{
    CreateTable createTable = new CreateTable();
    Table table = null;
    List<ColumnDefinition> columnDefinitions = new ArrayList<ColumnDefinition>();
    String columnName = null;
    String columnDataType = null;
    ColumnDefinition columnDef = null;
    List<String> columnSpecs = new ArrayList<String>();
	TableConstraint tableConstraint = null;
	String constraintName = null;
	List<Column> columns = null;
	ConflictDecision conflictDecision = null;
	ForeignKeyClause foreignKeyClause = null;
}
{
    <T_CREATE_TABLE>
	[ <T_IF> <T_NOT> <T_EXISTS> { createTable.setIfNotExists(true);} ] 
	table = Table()
	<T_OPEN_BRACKET>
	columnDefinitions = ColumnDefinitions()
	( LOOKAHEAD(4)
		<T_COMMA>
		[<T_CONSTRAINT> constraintName = getObjectName()]
		(
			<T_PRIMARY_KEY> columns = getColumns() [conflictDecision = getConflictDecision()]
			{
				createTable.addTableConstraint(new IndexedConstraint(constraintName,ConstraintType.PRIMARY_KEY,columns,conflictDecision));
			}
			| <T_UNIQUE> columns = getColumns() [conflictDecision = getConflictDecision()]
			{
				createTable.addTableConstraint(new IndexedConstraint(constraintName,ConstraintType.UNIQUE,columns,conflictDecision));
			}
			| <T_FOREIGN_KEY> columns = getColumns() foreignKeyClause = getForeignKeyClause()
			{
				createTable.addTableConstraint(new ForeignKeyConstraint(constraintName,columns,foreignKeyClause));
			}
		)
		{
			constraintName = null;
		}
	)*
	<T_CLOSE_BRACKET>
	<EOF>
	{
		createTable.setTable(table);
		createTable.setColumnDefinitions(columnDefinitions);
		return createTable;
	}
	
}

Table Table():
{
    String schemaName = null;
    String tableName = null;

}
{	
	(LOOKAHEAD(3) schemaName=getObjectName() "." tableName=getObjectName()
    |tableName = getObjectName())
    {
        Table table = new Table(schemaName,tableName);
        return table;
    }
}

List<ColumnDefinition> ColumnDefinitions():
{
    List<ColumnDefinition> columnDefinitions = new ArrayList<ColumnDefinition>();
    ColumnDefinition columnDef = null;
    String columnName = null;
    String columnDataType = null;
    String spec = null;
    List<String> columnSpecs = new ArrayList<String>();
}
{
    (columnName = getObjectName() columnDataType = getObjectName()
	
    ( spec = ColumnSpec() {columnSpecs.add(spec);} )*
    {
        columnDef = new ColumnDefinition(columnName,columnDataType);
        columnDef.setColumnSpecs(new ArrayList<String>(columnSpecs));
		columnSpecs.clear();
        columnDefinitions.add(columnDef);
    }
	)
    ( LOOKAHEAD(2)
        <T_COMMA>
        columnName = getObjectName() columnDataType = getObjectName()
        ( spec = ColumnSpec()
            {
                columnSpecs.add(spec);
            }
		)*
        {
            columnDef = new ColumnDefinition(columnName,columnDataType);
            columnDef.setColumnSpecs(new ArrayList<String>(columnSpecs));
			columnSpecs.clear();
            columnDefinitions.add(columnDef);
        }
    )*
    {
        return columnDefinitions;
    }
}

String ColumnSpec():
{
    Token token = null;
    Token token1 = null;
    String spec = null;
	String defaultValue = null;
}
{
    token = <T_PRIMARY_KEY> [token1 = <T_AUTOINCREMENT> ]
	{	
		spec = token.image;
		if(token1!=null){
			spec+=" "+token1.image;
		}
		return spec;
	}
   |LOOKAHEAD(2) token = <T_NOT> token1 = <T_NULL> { return token.image + " " + token1.image; }
   |token = <T_UNIQUE> { return token.image; }
   |LOOKAHEAD(2) token = <T_DEFAULT> defaultValue = getObjectName() { return token.image +" "+defaultValue; }
}

List<Column> getColumns():
{
	ArrayList<Column> columns = null;
	String columnName = null;
}
{
	(
		<T_OPEN_BRACKET>
		columnName = getObjectName() 
		{ 
			columns = new ArrayList<Column>();
			columns.add(new Column(columnName));
		}
		(
			<T_COMMA>
			columnName = getObjectName() 
			{ 
				columns.add(new Column(columnName));
			}
		)*
		<T_CLOSE_BRACKET>
	)
	{ return columns;}
}

ConflictDecision getConflictDecision():
{
	
}
{
	<T_ON> <T_CONFLICT>
		(
			<T_ROLLBACK> { return ConflictDecision.ROLLBACK;}
			|<T_ABORT> { return ConflictDecision.ABORT;}
			|<T_FAIL> { return ConflictDecision.FAIL;}
			|<T_IGNORE> { return ConflictDecision.IGNORE;}
			|<T_REPLACE> { return ConflictDecision.REPLACE;}
		)
}

ForeignKeyClause getForeignKeyClause():
{
	ForeignKeyClause foreignKeyClause = null;
	Table foreignTable = null;
	List<Column> columns = null;
	OnDeleteClause onDeleteClause = null;
    OnUpdateClause onUpdateClause = null;
    ForeignKeyDeferrable foreignKeyDeferrable = null;
}
{
	(
		<T_REFERENCES> foreignTable = Table() [ columns = getColumns()]
		[LOOKAHEAD(2) onDeleteClause = getOnDeleteClause() ]
		[LOOKAHEAD(2) onUpdateClause = getOnUpdateClause() ]
		[ foreignKeyDeferrable = getForeignKeyDeferrable() ]
	)
	{
		foreignKeyClause = new ForeignKeyClause(foreignTable);
		foreignKeyClause.setColumns(columns);
		foreignKeyClause.setOnDeleteClause(onDeleteClause);
		foreignKeyClause.setOnUpdateClause(onUpdateClause);
		foreignKeyClause.setForeignKeyDeferrable(foreignKeyDeferrable);
		return foreignKeyClause;
	}
}

OnDeleteClause getOnDeleteClause():
{
	ClauseDecision clauseDecision = null;
}
{
	(
		<T_ON> <T_DELETE> clauseDecision = getClauseDecision()
	)
	{
		return new OnDeleteClause(clauseDecision); 
	}
}

OnUpdateClause getOnUpdateClause():
{
	ClauseDecision clauseDecision = null;
	
}
{
	(
		<T_ON> <T_UPDATE> clauseDecision = getClauseDecision()
	)
	{
		
		return new OnUpdateClause(clauseDecision) ; 
	}
}

ClauseDecision getClauseDecision():
{
	
}
{
	( LOOKAHEAD(2)
		<T_SET> <T_NULL> { return ClauseDecision.SET_NULL;}
		|<T_SET> <T_DEFAULT> { return ClauseDecision.SET_DEFAULT;}
		|<T_CASCADE> { return ClauseDecision.CASCADE;}
		|<T_RESTRICT> { return ClauseDecision.RESTRICT;}
		|<T_NO> <T_ACTION> { return ClauseDecision.NO_ACTION;}
	)
}

ForeignKeyDeferrable getForeignKeyDeferrable():
{
	
}
{
	(
		<T_NOT> <T_DEFERRABLE> { return new ForeignKeyDeferrable(DeferrableClause.NOT_DEFERRABLE);}
		( LOOKAHEAD(3)
		<T_DEFERRABLE> <T_INITIALLY> <T_DEFERRED> { return new ForeignKeyDeferrable(DeferrableClause.INITIALLY_DEFERRED); }
		|<T_DEFERRABLE> <T_INITIALLY> <T_IMMEDIATE> { return new ForeignKeyDeferrable(DeferrableClause.INITIALLY_IMMEDIATE);}
		)
	)
}


















