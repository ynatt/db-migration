/* CCSQLiteQueryParser.java */
/* Generated By:JavaCC: Do not edit this line. CCSQLiteQueryParser.java */
package javacc.sqlitequeryparser;

import db.migration.model.*;
import db.migration.model.modification.*;
import db.migration.model.modification.alter.table.*;
import db.migration.model.modification.alter.table.enums.AlterTableType;
import db.migration.model.modification.create.table.enums.*;
import db.migration.model.modification.create.index.CreateIndex;
import db.migration.model.modification.create.table.*;
import db.migration.model.modification.drop.*;
import db.migration.model.modification.insert.*;
import java.util.ArrayList;
import java.util.List;



public class CCSQLiteQueryParser implements CCSQLiteQueryParserConstants {
        List<ParseException> parseErrors = new ArrayList<ParseException>();

    public DBChange analiseQuery() throws ParseException, TokenMgrError{
        return analise();
    }

        public List<ParseException> getParseErrors() {
        return parseErrors;
        }

  final public DBChange analise() throws ParseException {DBChange dbChange = null;
    try {
      if (jj_2_1(2)) {
        dbChange = createTable();
      } else if (jj_2_2(2)) {
        dbChange = drop();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_CREATE:{
          dbChange = createIndex();
          break;
          }
        case T_ALTER:{
          dbChange = alterTable();
          break;
          }
        case T_INSERT:{
          dbChange = insertIntoTable();
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
parseErrors.add(e);
                        {if (true) throw e;}
    }
{if ("" != null) return dbChange;}
    throw new Error("Missing return statement in function");
  }

  final public String getObjectName() throws ParseException {Token token = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_IDENTIFIER:{
      token = jj_consume_token(T_IDENTIFIER);
      break;
      }
    case T_QUOTED_IDENTIFIER:{
      token = jj_consume_token(T_QUOTED_IDENTIFIER);
      break;
      }
    case TEXT:{
      token = jj_consume_token(TEXT);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token.image;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTable createTable() throws ParseException {CreateTable createTable = new CreateTable();
    Table table = null;
    List<ColumnDefinition> columnDefinitions = new ArrayList<ColumnDefinition>();
    String columnName = null;
    String columnDataType = null;
    ColumnDefinition columnDef = null;
    List<String> columnSpecs = new ArrayList<String>();
        TableConstraint tableConstraint = null;
        String constraintName = null;
        List<Column> columns = null;
        ConflictDecision conflictDecision = null;
        ForeignKeyClause foreignKeyClause = null;
    jj_consume_token(T_CREATE);
    jj_consume_token(T_TABLE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_IF:{
      jj_consume_token(T_IF);
      jj_consume_token(T_NOT);
      jj_consume_token(T_EXISTS);
createTable.setIfNotExists(true);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    table = Table();
    jj_consume_token(T_OPEN_BRACKET);
    columnDefinitions = ColumnDefinitions();
    label_1:
    while (true) {
      if (jj_2_3(4)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(T_COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_CONSTRAINT:{
        jj_consume_token(T_CONSTRAINT);
        constraintName = getObjectName();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_PRIMARY:{
        jj_consume_token(T_PRIMARY);
        jj_consume_token(T_KEY);
        columns = getColumns();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_ON:{
          conflictDecision = getConflictDecision();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
createTable.addTableConstraint(new IndexedConstraint(constraintName, ConstraintType.PRIMARY_KEY,columns,conflictDecision));
        break;
        }
      case T_UNIQUE:{
        jj_consume_token(T_UNIQUE);
        columns = getColumns();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_ON:{
          conflictDecision = getConflictDecision();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          ;
        }
createTable.addTableConstraint(new IndexedConstraint(constraintName,ConstraintType.UNIQUE,columns,conflictDecision));
        break;
        }
      case T_FOREIGN:{
        jj_consume_token(T_FOREIGN);
        jj_consume_token(T_KEY);
        columns = getColumns();
        foreignKeyClause = getForeignKeyClause();
createTable.addTableConstraint(new ForeignKeyConstraint(constraintName,columns,foreignKeyClause));
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
constraintName = null;
    }
    jj_consume_token(T_CLOSE_BRACKET);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 66:{
      jj_consume_token(66);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(0);
createTable.setTable(table);
                createTable.setColumnDefinitions(columnDefinitions);
                {if ("" != null) return createTable;}
    throw new Error("Missing return statement in function");
  }

  final public Table Table() throws ParseException {String schemaName = null;
    String tableName = null;
    if (jj_2_4(3)) {
      schemaName = getObjectName();
      jj_consume_token(67);
      tableName = getObjectName();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TEXT:
      case T_IDENTIFIER:
      case T_QUOTED_IDENTIFIER:{
        tableName = getObjectName();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
Table table = new Table(schemaName,tableName);
        {if ("" != null) return table;}
    throw new Error("Missing return statement in function");
  }

  final public IndexName IndexName() throws ParseException {String schemaName = null;
        String indexStringName = null;
        IndexName indexName = null;
    if (jj_2_5(3)) {
      schemaName = getObjectName();
      jj_consume_token(67);
      indexStringName = getObjectName();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TEXT:
      case T_IDENTIFIER:
      case T_QUOTED_IDENTIFIER:{
        indexStringName = getObjectName();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
indexName = new IndexName(schemaName,indexStringName);
        {if ("" != null) return indexName;}
    throw new Error("Missing return statement in function");
  }

  final public List<ColumnDefinition> ColumnDefinitions() throws ParseException {List<ColumnDefinition> columnDefinitions = new ArrayList<ColumnDefinition>();
    ColumnDefinition columnDef = null;
    String columnName = null;
    String columnDataType = null;
    String spec = null;
    List<String> columnSpecs = new ArrayList<String>();
    columnName = getObjectName();
    columnDataType = getObjectName();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_PRIMARY:
      case T_NOT:
      case T_UNIQUE:
      case T_DEFAULT:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      spec = ColumnSpec();
columnSpecs.add(spec);
    }
columnDef = new ColumnDefinition(columnName,columnDataType);
        columnDef.setColumnSpecs(new ArrayList<String>(columnSpecs));
                columnSpecs.clear();
        columnDefinitions.add(columnDef);
    label_3:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(T_COMMA);
      columnName = getObjectName();
      columnDataType = getObjectName();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_PRIMARY:
        case T_NOT:
        case T_UNIQUE:
        case T_DEFAULT:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        spec = ColumnSpec();
columnSpecs.add(spec);
      }
columnDef = new ColumnDefinition(columnName,columnDataType);
            columnDef.setColumnSpecs(new ArrayList<String>(columnSpecs));
                        columnSpecs.clear();
            columnDefinitions.add(columnDef);
    }
{if ("" != null) return columnDefinitions;}
    throw new Error("Missing return statement in function");
  }

  final public String ColumnSpec() throws ParseException {String spec = null;
        String defaultValue = null;
        boolean isAutoincrement = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_PRIMARY:{
      jj_consume_token(T_PRIMARY);
      jj_consume_token(T_KEY);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_AUTOINCREMENT:{
        jj_consume_token(T_AUTOINCREMENT);
isAutoincrement =true;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
spec = "PRIMARY KEY";
                if(isAutoincrement){
                        spec+=" AUTOINCREMENT";
                }
                {if ("" != null) return spec;}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_7(2)) {
        jj_consume_token(T_NOT);
        jj_consume_token(T_NULL);
{if ("" != null) return "NOT NULL";}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_UNIQUE:{
          jj_consume_token(T_UNIQUE);
{if ("" != null) return "UNIQUE";}
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          if (jj_2_8(2)) {
            jj_consume_token(T_DEFAULT);
            defaultValue = getObjectName();
{if ("" != null) return "DEFAULT "+defaultValue;}
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Column> getColumns() throws ParseException {ArrayList<Column> columns = null;
        String columnName = null;
    jj_consume_token(T_OPEN_BRACKET);
    columnName = getObjectName();
columns = new ArrayList<Column>();
                        columns.add(new Column(columnName));
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      jj_consume_token(T_COMMA);
      columnName = getObjectName();
columns.add(new Column(columnName));
    }
    jj_consume_token(T_CLOSE_BRACKET);
{if ("" != null) return columns;}
    throw new Error("Missing return statement in function");
  }

  final public ConflictDecision getConflictDecision() throws ParseException {
    jj_consume_token(T_ON);
    jj_consume_token(T_CONFLICT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_ROLLBACK:{
      jj_consume_token(T_ROLLBACK);
{if ("" != null) return ConflictDecision.ROLLBACK;}
      break;
      }
    case T_ABORT:{
      jj_consume_token(T_ABORT);
{if ("" != null) return ConflictDecision.ABORT;}
      break;
      }
    case T_FAIL:{
      jj_consume_token(T_FAIL);
{if ("" != null) return ConflictDecision.FAIL;}
      break;
      }
    case T_IGNORE:{
      jj_consume_token(T_IGNORE);
{if ("" != null) return ConflictDecision.IGNORE;}
      break;
      }
    case T_REPLACE:{
      jj_consume_token(T_REPLACE);
{if ("" != null) return ConflictDecision.REPLACE;}
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ForeignKeyClause getForeignKeyClause() throws ParseException {ForeignKeyClause foreignKeyClause = null;
        Table foreignTable = null;
        List<Column> columns = null;
        OnDeleteClause onDeleteClause = null;
    OnUpdateClause onUpdateClause = null;
    ForeignKeyDeferrable foreignKeyDeferrable = null;
    jj_consume_token(T_REFERENCES);
    foreignTable = Table();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_OPEN_BRACKET:{
      columns = getColumns();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    if (jj_2_9(2)) {
      onDeleteClause = getOnDeleteClause();
    } else {
      ;
    }
    if (jj_2_10(2)) {
      onUpdateClause = getOnUpdateClause();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_NOT:{
      foreignKeyDeferrable = getForeignKeyDeferrable();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
foreignKeyClause = new ForeignKeyClause(foreignTable);
                foreignKeyClause.setColumns(columns);
                foreignKeyClause.setOnDeleteClause(onDeleteClause);
                foreignKeyClause.setOnUpdateClause(onUpdateClause);
                foreignKeyClause.setForeignKeyDeferrable(foreignKeyDeferrable);
                {if ("" != null) return foreignKeyClause;}
    throw new Error("Missing return statement in function");
  }

  final public OnDeleteClause getOnDeleteClause() throws ParseException {ClauseDecision clauseDecision = null;
    jj_consume_token(T_ON);
    jj_consume_token(T_DELETE);
    clauseDecision = getClauseDecision();
{if ("" != null) return new OnDeleteClause(clauseDecision);}
    throw new Error("Missing return statement in function");
  }

  final public OnUpdateClause getOnUpdateClause() throws ParseException {ClauseDecision clauseDecision = null;
    jj_consume_token(T_ON);
    jj_consume_token(T_UPDATE);
    clauseDecision = getClauseDecision();
{if ("" != null) return new OnUpdateClause(clauseDecision) ;}
    throw new Error("Missing return statement in function");
  }

  final public ClauseDecision getClauseDecision() throws ParseException {
    if (jj_2_11(2)) {
      jj_consume_token(T_SET);
      jj_consume_token(T_NULL);
{if ("" != null) return ClauseDecision.SET_NULL;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_SET:{
        jj_consume_token(T_SET);
        jj_consume_token(T_DEFAULT);
{if ("" != null) return ClauseDecision.SET_DEFAULT;}
        break;
        }
      case T_CASCADE:{
        jj_consume_token(T_CASCADE);
{if ("" != null) return ClauseDecision.CASCADE;}
        break;
        }
      case T_RESTRICT:{
        jj_consume_token(T_RESTRICT);
{if ("" != null) return ClauseDecision.RESTRICT;}
        break;
        }
      case T_NO:{
        jj_consume_token(T_NO);
        jj_consume_token(T_ACTION);
{if ("" != null) return ClauseDecision.NO_ACTION;}
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ForeignKeyDeferrable getForeignKeyDeferrable() throws ParseException {
    jj_consume_token(T_NOT);
    jj_consume_token(T_DEFERRABLE);
{if ("" != null) return new ForeignKeyDeferrable(DeferrableClause.NOT_DEFERRABLE);}
    if (jj_2_12(3)) {
      jj_consume_token(T_DEFERRABLE);
      jj_consume_token(T_INITIALLY);
      jj_consume_token(T_DEFERRED);
{if ("" != null) return new ForeignKeyDeferrable(DeferrableClause.INITIALLY_DEFERRED);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_DEFERRABLE:{
        jj_consume_token(T_DEFERRABLE);
        jj_consume_token(T_INITIALLY);
        jj_consume_token(T_IMMEDIATE);
{if ("" != null) return new ForeignKeyDeferrable(DeferrableClause.INITIALLY_IMMEDIATE);}
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public DBChange drop() throws ParseException {Table table = null;
        IndexName indexName = null;
    jj_consume_token(T_DROP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_TABLE:{
      jj_consume_token(T_TABLE);
DropTable dropTable = new DropTable();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_IF:{
        jj_consume_token(T_IF);
        jj_consume_token(T_EXISTS);
dropTable.setIfExists(true);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      table = Table();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 66:{
        jj_consume_token(66);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:{
        jj_consume_token(0);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
dropTable.setTable(table);
                                {if ("" != null) return dropTable;}
      break;
      }
    case T_INDEX:{
      jj_consume_token(T_INDEX);
DropIndex dropIndex = new DropIndex();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_IF:{
        jj_consume_token(T_IF);
        jj_consume_token(T_EXISTS);
dropIndex.setIfExists(true);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      indexName = IndexName();
dropIndex.setIndexName(indexName);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 66:{
        jj_consume_token(66);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:{
        jj_consume_token(0);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
{if ("" != null) return dropIndex;}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public DBChange createIndex() throws ParseException {CreateIndex createIndex = new CreateIndex();
        Table table = new Table();
        Index index = new Index();
        IndexName indexName = null;
        List<IndexedColumn> indexedColumns = new ArrayList<IndexedColumn>();
    jj_consume_token(T_CREATE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_UNIQUE:{
      jj_consume_token(T_UNIQUE);
createIndex.setUnique(true);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(T_INDEX);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_IF:{
      jj_consume_token(T_IF);
      jj_consume_token(T_NOT);
      jj_consume_token(T_EXISTS);
createIndex.setIfNotExists(true);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    indexName = IndexName();
index.setIndexName(indexName);
    jj_consume_token(T_ON);
    table = Table();
createIndex.setTable(table);
    indexedColumns = getIndexedColumns();
index.setIndexedColumns(indexedColumns);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 66:{
      jj_consume_token(66);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 0:{
      jj_consume_token(0);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
createIndex.setIndex(index);
                {if ("" != null) return createIndex;}
    throw new Error("Missing return statement in function");
  }

  final public List<IndexedColumn> getIndexedColumns() throws ParseException {IndexedColumn indexedColumn = null;
        ArrayList<IndexedColumn> indexedColumns = new ArrayList<IndexedColumn>();
        String columnName = null;
    jj_consume_token(T_OPEN_BRACKET);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_COMMA:{
        jj_consume_token(T_COMMA);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      columnName = getObjectName();
indexedColumn = new IndexedColumn(new Column(columnName));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_ASC:
      case T_DESC:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case T_ASC:{
          jj_consume_token(T_ASC);
indexedColumn.setOrder(Order.ASC);
          break;
          }
        case T_DESC:{
          jj_consume_token(T_DESC);
indexedColumn.setOrder(Order.ASC);
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        ;
      }
indexedColumns.add(indexedColumn);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TEXT:
      case T_COMMA:
      case T_IDENTIFIER:
      case T_QUOTED_IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_6;
      }
    }
    jj_consume_token(T_CLOSE_BRACKET);
{if ("" != null) return indexedColumns;}
    throw new Error("Missing return statement in function");
  }

  final public DBChange alterTable() throws ParseException {Table table = null;
        AbstractAlterType alterType = null;
        Table newTable = null;
        ColumnDefinition columnDefinition = null;
        List<ColumnDefinition> column = null;
    jj_consume_token(T_ALTER);
    jj_consume_token(T_TABLE);
    table = Table();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_RENAME:{
      jj_consume_token(T_RENAME);
      jj_consume_token(T_TO);
      newTable = Table();
{if ("" != null) return new AlterTable(table,new RenameTo(AlterTableType.RENAME,newTable));}
      break;
      }
    case T_ADD:{
      jj_consume_token(T_ADD);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_COLUMN:{
        jj_consume_token(T_COLUMN);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      column = ColumnDefinitions();
columnDefinition=column.get(0);
                        {if ("" != null) return new AlterTable(table,new AddColumn(AlterTableType.ADD,columnDefinition));}
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public DBChange insertIntoTable() throws ParseException {Table table = null;
        List<Column> columns = null;
        List<String> values = new ArrayList<String>();
        String value = null;
        StringBuilder valuesBuilder = new StringBuilder();
        boolean hasComma = false;
    jj_consume_token(T_INSERT);
    jj_consume_token(T_INTO);
    table = Table();
    columns = getColumns();
    jj_consume_token(T_VALUES);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_COMMA:{
        jj_consume_token(T_COMMA);
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(T_OPEN_BRACKET);
valuesBuilder.append(" ( ");
      value = getInsertValue();
hasComma=false;
                        valuesBuilder.append(value);
      jj_consume_token(T_CLOSE_BRACKET);
valuesBuilder.append(" )");
values.add(valuesBuilder.toString());
                                valuesBuilder = new StringBuilder();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_OPEN_BRACKET:
      case T_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_7;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 66:{
      jj_consume_token(66);
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(0);
{if ("" != null) return new InsertIntoTable(table,columns,values);}
    throw new Error("Missing return statement in function");
  }

  final public String getInsertValue() throws ParseException {Token columnValue = null;
        Token comma = null;
        StringBuilder value = new StringBuilder();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case T_COMMA:{
        comma = jj_consume_token(T_COMMA);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        columnValue = jj_consume_token(INTEGER);
        break;
        }
      case BLOB:{
        columnValue = jj_consume_token(BLOB);
        break;
        }
      case REAL:{
        columnValue = jj_consume_token(REAL);
        break;
        }
      case TEXT:{
        columnValue = jj_consume_token(TEXT);
        break;
        }
      case T_NULL:{
        columnValue = jj_consume_token(T_NULL);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if(comma!=null){
                                value.append(" , ");
                        }
                        comma=null;
                        value.append(columnValue.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case REAL:
      case TEXT:
      case BLOB:
      case T_COMMA:
      case T_NULL:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_8;
      }
    }
{if ("" != null) return value.toString();}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(T_COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_15()) return true;
    if (jj_scan_token(67)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(T_INDEX)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(T_CREATE)) return true;
    if (jj_scan_token(T_TABLE)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(T_SET)) return true;
    if (jj_scan_token(T_NULL)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(T_OPEN_BRACKET)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(T_TABLE)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(T_COMMA)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(T_FOREIGN)) return true;
    if (jj_scan_token(T_KEY)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(T_UNIQUE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(T_DEFAULT)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(T_ON)) return true;
    if (jj_scan_token(T_UPDATE)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(T_NOT)) return true;
    if (jj_scan_token(T_NULL)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(T_PRIMARY)) return true;
    if (jj_scan_token(T_KEY)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(T_DROP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(T_DEFERRABLE)) return true;
    if (jj_scan_token(T_INITIALLY)) return true;
    if (jj_scan_token(T_DEFERRED)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(T_CONSTRAINT)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_15()) return true;
    if (jj_scan_token(67)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(T_ON)) return true;
    if (jj_scan_token(T_DELETE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CCSQLiteQueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x800,0x2000000,0x80000000,0x0,0x0,0x8100000,0x0,0x800,0x800,0x28900000,0x28900000,0x400000,0x100000,0x8000000,0x80000,0x0,0x20000,0x800000,0x0,0x0,0x2000000,0x0,0x1,0x2000000,0x0,0x1,0x10008000,0x8000000,0x2000000,0x0,0x1,0x80000,0x0,0x0,0x80800,0x0,0x0,0x80000,0xa0000,0x0,0x80000,0x1001d00,0x1081d00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8400000,0x40000000,0x0,0x0,0x1,0x1,0x80,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x7c,0x0,0x0,0x7800,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300000,0x300000,0x40000000,0x1000000,0x2800000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x4,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CCSQLiteQueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CCSQLiteQueryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CCSQLiteQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CCSQLiteQueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CCSQLiteQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CCSQLiteQueryParser(CCSQLiteQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CCSQLiteQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
